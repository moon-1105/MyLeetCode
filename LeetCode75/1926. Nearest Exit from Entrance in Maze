from collections import deque
class Solution(object):
    def nearestExit(self, maze, entrance):
        """
        :type maze: List[List[str]]
        :type entrance: List[int]
        :rtype: int
        """
        N, M = len(maze), len(maze[0])
        directions = [[1,0],[-1,0],[0,-1],[0,1]]
        q = deque()
        q.appendleft(entrance)
        steps = 0

        while len(q)!=0 :
            now = q.popleft()
            #print("now",now,maze[now[0]][now[1]])
            if maze[now[0]][now[1]] == ".":
                if (now[0] != entrance[0] or now[1] != entrance[1]) and (now[0] == 0 or now[0] == N-1 or now[1] == 0 or now[1] == M-1): 
                    return steps
                else :

                    maze[now[0]][now[1]] = "*"
                    for d in directions:
                        next_x, next_y = now[0]+d[0], now[1]+d[1]
                        #print("test",next_x, next_y)             
                        if 0 <= next_x < N and 0<= next_y < M:
                            if maze[next_x][next_y]=="." :
                                q.append([next_x,next_y])
                    #print(q)
            steps += 1
        return -1

        
