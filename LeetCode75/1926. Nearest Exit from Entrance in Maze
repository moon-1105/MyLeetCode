from collections import deque 
def same(one, two):
    if one[0] == two[0] and one[1] == two[1] :
        return True
    return False 

class Solution(object):
    def nearestExit(self, maze, entrance):
        """
        :type maze: List[List[str]]
        :type entrance: List[int]
        :rtype: int
        """
        ans = 0 
        q = deque()
        directions = [[1,0],[-1,0],[0,1],[0,-1]]
        q.append(entrance)
        N, M = len(maze[0]), len(maze)
        print(N, M)
        while len(q)!=0 :
            now = q.popleft()
            print(now)
            maze[now[0]][now[1]] = "*"
            if not same(now, entrance): 
                if now[0]==0 or now[0] == M-1 or now[1]==0 or now[1]==N-1:
                    return ans
            for d in directions :
                nextX, nextY = now[0]+d[0], now[1]+d[1]
                if 0<= nextX < M and 0<= nextY < N :
                    if maze[nextX][nextY] == ".":
                        q.append([nextX,nextY])
            ans += 1

        return -1


        
