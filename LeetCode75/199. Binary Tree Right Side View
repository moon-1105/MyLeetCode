from collections import deque 
from collections import defaultdict
# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution(object):
    def rightSideView(self, root):
        """
        :type root: TreeNode
        :rtype: List[int]
        """
        if not root :
            return []
        Q = deque()
        dept = 0
        Q.append([root, dept])
        res = defaultdict(list)
        while len(Q)!=0:
            now = Q.popleft()
            res[now[1]].append(now[0].val)
            #if now[0] :
                #print(now[0].val, now[1])
            if now[0].left :
                Q.append([now[0].left, now[1]+1])
            if now[0].right :
                Q.append([now[0].right, now[1]+1]) 
        #print(res)
        ans = []
        for key in res.keys():
            ans.append(res[key].pop())
        return ans
        
